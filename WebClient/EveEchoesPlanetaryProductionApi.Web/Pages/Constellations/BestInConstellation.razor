@page "/best/constellation"
@page "/best/constellation/{ConstellationId:long}"

@using EveEchoesPlanetaryProductionApi.Api.Models.Constellations.BestSolarSystemsInConstellation
@using EveEchoesPlanetaryProductionApi.Api.Models.Constellations.GetSimpleDetails
@using EveEchoesPlanetaryProductionApi.Services.Data.Models
@using EveEchoesPlanetaryProductionApi.Services.Models.EveEchoesMarket
@using EveEchoesPlanetaryProductionApi.Web.Services
@using EveEchoesPlanetaryProductionApi.Api.Models
@using EveEchoesPlanetaryProductionApi.Common.Extensions

@inject IEveApiService eveApiService;
@inject IAppDataService appDataService;
@inject NavigationManager navigationManager;
@inject IJSRuntime JS;

<div class="container">
    <section class="row">
        <CardComponent>
            <h3 class="card-title">Constellation: @this.ConstellationDetails?.Name</h3>
            <h4 class="card-title">Region: @this.ConstellationDetails?.RegionName</h4>

            <div class="row">
                <div class="col-md-5 offset-md-1">
                    <PriceSelectorComponent OnChange="this.PriceSelectorChangeHandler"></PriceSelectorComponent>
                </div>
                <div class="col-md-5 align-self-center">
                    <SelectComponent Label="Colonies" OnChange="this.OnPlanetsChangeHandler"></SelectComponent>
                </div>
            </div>

            @if (this.PriceSelector is PriceSelector.UserProvided)
            {
                <InputPrices OnChange="this.OnInputPriceChangeHandler"></InputPrices>
            }

            @if (this.BestSystems is not null)
            {
                <h2 class="card-title my-4">Best Systems In Constellation</h2>
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>System</th>
                                <th>Planets</th>
                                <th>Estimated Value</th>
                            </tr>
                        </thead>
                    <tbody>
                    @foreach (var system in this.BestSystems.Systems)
                    {
                        <tr class="accordion">
                            <td class="text-center">
                                <a href="/system/@system.Id">@system.Name</a>
                            </td>
                            <td class="text-center">
                                @system.Planets
                            </td>
                            <td class="text-center">
                                @system.EstimatedValue
                            </td>
                        </tr>
                        <tr style="display: none;">
                            <td colspan="3">
                                <SimpleTableComponent Data="(system?.Resources)"></SimpleTableComponent>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
            else
            {
                if (this.ShowLoader)
                {
                    <Loader></Loader>
                }
            }
        </CardComponent>
    </section>
</div>

@code {
    [Parameter]
    public long ConstellationId { get; set; }

    private ConstellationSimpleDetailsModel ConstellationDetails { get; set; }

    private BestConstellationModel BestSystems { get; set; }

    private PriceSelector PriceSelector { get; set; }

    private bool ShowLoader { get; set; }

    private int MiningPlanets { get; set; }

    private PricesModel Prices { get; set; }

    private bool IsSelected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.ConstellationId = this.ConstellationId == 0 ? this.appDataService.CurrentSolarSystem?.ConstellationId ?? 0 : this.ConstellationId;

        if (this.ConstellationId is 0)
        {
            this.navigationManager.NavigateTo("/404");
            return;
        }

        this.ConstellationDetails = await this.eveApiService.Constellations.GetSimpleDetailsAsync(this.ConstellationId);

        await base.OnInitializedAsync();
    }

    private bool ValidUserPrices()
        => !this.Prices
            .GetType()
            .GetProperties()
            .Select(property => property.GetValue(this.Prices) as decimal? ?? 0)
            .Any(value => value is 0);

    private async Task ValidateUserInput()
    {
        this.ShowLoader = false;
        this.BestSystems = null;

        if (!this.IsSelected)
        {
            return;
        }

        if (this.MiningPlanets < 1 || this.MiningPlanets > 6)
        {
            return;
        }

        if (this.PriceSelector is PriceSelector.UserProvided)
        {
            if (!this.ValidUserPrices())
            {
                return;
            }
        }

        this.ShowLoader = true;
        await this.LoadData();
    }

    private async Task PriceSelectorChangeHandler(PriceSelector selector)
    {
        this.PriceSelector = selector;
        this.IsSelected = true;

        this.BestSystems = null;

        if (selector is PriceSelector.UserProvided)
        {
            this.BestSystems = null;
            this.Prices = new PricesModel();
        }

        await this.ValidateUserInput();
    }

    private async Task OnPlanetsChangeHandler(int planetsCount)
    {
        this.MiningPlanets = planetsCount;

        await this.ValidateUserInput();
    }

    private async Task OnInputPriceChangeHandler(bool success)
    {
        this.BestSystems = null;

        if (success)
        {
            var properties = this.Prices.GetType().GetProperties();

            foreach (var property in properties)
            {
                var value = this.appDataService.PlanetaryResourcesPrices[property.Name.ToTitleCase()];
                property.SetValue(this.Prices, value);
            }

            await this.ValidateUserInput();
        }
    }

    private async Task LoadData()
    {
        var model = new BestInputModel()
        {
            MiningPlanets = this.MiningPlanets,
            Price = this.PriceSelector.ToString(),
            Prices = null
        };

        if (this.PriceSelector is PriceSelector.UserProvided)
        {
            model.Prices = this.Prices;
        }

        this.BestSystems = await this.eveApiService.Constellations.GetBestSystemsInConstellation(this.ConstellationId, model);

        this.StateHasChanged();
        await this.JS.InvokeAsync<Task>("addAccordionOnClickHandlers");
    }
}
