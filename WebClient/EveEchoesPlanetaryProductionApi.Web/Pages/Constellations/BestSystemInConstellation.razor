@page "/constellation/best"
@page "/constellation/best/{ConstellationId:long}"
@using EveEchoesPlanetaryProductionApi.Api.Models.Constellations.GetSimpleDetails
@using EveEchoesPlanetaryProductionApi.Services.Models.EveEchoesMarket
@using EveEchoesPlanetaryProductionApi.Web.Services
@using EveEchoesPlanetaryProductionApi.Api.Models.BestSystemModel
@using EveEchoesPlanetaryProductionApi.Common

@inherits BestBase<BestSystemModel>;

@inject IEveApiService eveApiService;
@inject NavigationManager navigationManager;
@inject IJSRuntime JS;

<div class="container">
    <section class="row">
        <SystemCardComponent>
            <h3 class="card-title">Constellation: @this.ConstellationDetails?.Name</h3>
            <h4 class="card-title">Region: @this.ConstellationDetails?.RegionName</h4>

            <div class="row">
                <div class="col-md-5 offset-md-1">
                    <PriceSelectorComponent OnChange="this.OnPriceSelectorChangeHandler"></PriceSelectorComponent>
                </div>
                <div class="col-md-5 align-self-center">
                    <SelectComponent Label="Colonies" Range="@GlobalConstants.Ui.MaxColonies" OnChange="this.OnPlanetsChangeHandler"></SelectComponent>
                </div>
            </div>

            @if (this.PriceSelector is PriceSelector.UserProvided)
            {
                <InputPrices OnChange="this.OnInputPriceChangeHandler"></InputPrices>
            }

            @if (this.BestItems is not null)
            {
                <h2 class="card-title my-4">Best Systems In Constellation</h2>
                    <AccordionSystemsComponent Systems="this.BestItems"></AccordionSystemsComponent>
            }
            else
            {
                if (this.ShowLoader)
                {
                    <Loader></Loader>
                }
            }
        </SystemCardComponent>
    </section>
</div>

@code {
    [Parameter]
    public long ConstellationId { get; set; }

    private ConstellationSimpleDetailsModel ConstellationDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.ConstellationId = this.ConstellationId == 0 ? this.AppDataService.CurrentSolarSystem?.ConstellationId ?? 0 : this.ConstellationId;

        if (this.ConstellationId <= 0)
        {
            this.navigationManager.NavigateTo("/");
            return;
        }

        this.navigationManager.NavigateTo($"/constellation/best");

        this.ConstellationDetails = await this.eveApiService.Constellations.GetSimpleDetailsAsync(this.ConstellationId);
    }

    protected override async Task LoadData()
    {
        this.CreateInputModelFromUserInput();

        this.BestItems = (await this.eveApiService.Constellations.GetBestSystemsInConstellation(this.ConstellationId, this.UserInput)).Systems;

        this.StateHasChanged();
        await this.JS.InvokeAsync<Task>("addAccordionOnClickHandlers");
    }
}
