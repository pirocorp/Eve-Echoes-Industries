@page "/"
@page "/index.html"

@using EveEchoesPlanetaryProductionApi.Services.Data.Models.SolarSystemServiceModel
@using EveEchoesPlanetaryProductionApi.Web.Services

@inject IEveApiService eveApiService
@inject IAppDataService appDataService

<div class="container">
    <section class="row">
        @if (this.randomSolarSystem is null)
        {
            <Loader></Loader>
        }
        else
        {
            <EveInfo RegionsCount="this.regionsCount" ConstellationsCount="this.constellationsCount" SolarSystemCount="this.solarSystemCount"></EveInfo>
            <div class="w-100 my-4">
                <SystemCardComponent>
                    <h3 class="card-title">System: @this.randomSolarSystem.Name</h3>
                    <h4 class="card-text">Constellation: @this.randomSolarSystem.ConstellationName</h4>
                    <h5 class="card-text">Region: @this.randomSolarSystem.RegionName</h5>
                </SystemCardComponent>
            </div>
            <div class="w-100 my-4">
                <ResourceCardComponent>
                    <p>In eve echoes universe there are @(this.planetaryResourcesCount) planetary produced resources.</p>
                </ResourceCardComponent>
            </div>
        }
</section>
</div>

@code
{
    private int regionsCount;
    private int constellationsCount;
    private int solarSystemCount;
    private int planetaryResourcesCount;

    private SolarSystemServiceModel randomSolarSystem;

    protected override async Task OnInitializedAsync()
    {
        if (this.appDataService.RegionsCount is null)
        {
            this.regionsCount = await this.eveApiService.Regions.GetCountAsync();
            this.appDataService.RegionsCount = this.regionsCount;
        }
        else
        {
            this.regionsCount = this.appDataService.RegionsCount.Value;
        }

        if (this.appDataService.ConstellationsCount is null)
        {
            this.constellationsCount = await this.eveApiService.Constellations.GetCountAsync();
            this.appDataService.ConstellationsCount = this.constellationsCount;
        }
        else
        {
            this.constellationsCount = this.appDataService.ConstellationsCount.Value;
        }

        if (this.appDataService.SolarSystemCount is null)
        {
            this.solarSystemCount = await this.eveApiService.Systems.GetCountAsync();
            this.appDataService.SolarSystemCount = this.solarSystemCount;
        }
        else
        {
            this.solarSystemCount = this.appDataService.SolarSystemCount.Value;
        }

        if (this.appDataService.PlanetaryResourcesCount is null)
        {
            this.planetaryResourcesCount = await this.eveApiService.PlanetaryResources.GetPlanetaryResourcesCount();
            this.appDataService.PlanetaryResourcesCount = this.planetaryResourcesCount;
        }
        else
        {
            this.planetaryResourcesCount = this.appDataService.PlanetaryResourcesCount.Value;
        }

        if (this.appDataService.CurrentSolarSystem is null)
        {
            this.randomSolarSystem = await this.eveApiService.Systems.GetRandomAsync();
            this.appDataService.CurrentSolarSystem = this.randomSolarSystem;
        }
        else
        {
            this.randomSolarSystem = this.appDataService.CurrentSolarSystem;
        }
    }
}
