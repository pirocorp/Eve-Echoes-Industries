@using System.Globalization
@using EveEchoesPlanetaryProductionApi.Services.Data.Models.SolarSystemServiceModel
@using EveEchoesPlanetaryProductionApi.Web.Services

@inject IAppDataService AppDataService;
@inject IEveApiService eveApiService;

<section class="container">
    <h3 class="text-center my-5">User Provided Planetary Resources Prices</h3>
    <div class="row">
        @if (this.PlanetaryResources is not null)
        {
            foreach (var resource in this.PlanetaryResources)
            {
                <div class="col-12 col-lg-6 col-xl-3 form-group">
                    <label for="@resource">@resource</label>
                    <input class="form-field"
                           type="number"
                           step="any"
                           name=@resource
                           id="@resource"
                           value=@(this.TryGetValue(resource))
                           placeholder="price"
                           disabled=@(this.Disabled) 
                           @onchange="@((e) => this.ChangeResourceValue((string)e.Value, resource))">
                </div>
            }

            <div class="col-12 col-lg-6 col-xl-3">
                <button class="btn-form btn-form-submit ">Submit</button>
            </div>
            <div class="col-12 col-lg-6 col-xl-3">
                <button class="btn-form btn-danger" @onclick="this.ClearPrices">Clear</button>
            </div>
        }
    </div>
</section>

@code {

    [Parameter]
    public SolarSystemServiceModel SolarSystem { get; set; }

    [Parameter]
    public EventCallback<bool> OnChange { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    private IEnumerable<string> PlanetaryResources { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (this.SolarSystem is null)
        {
            this.PlanetaryResources = await this.eveApiService.PlanetaryResources.GetPlanetaryResources();
            return;
        }

        var planetaryResources = this.SolarSystem.Planets
            .SelectMany(p => p.PlanetResources)
            .Select(pr => pr.ItemName)
            .Distinct()
            .ToList();

        this.PlanetaryResources = planetaryResources;
    }

    private string TryGetValue(string planetaryResource)
    {
        decimal value = 0;

        var success = this.AppDataService.PlanetaryResourcesPrices?.TryGetValue(planetaryResource, out value) ?? false;

        if (success)
        {
            return value.ToString(CultureInfo.InvariantCulture);
        }

        return planetaryResource;
    }

    private void ChangeResourceValue(string value, string resource)
    {
        var success = decimal.TryParse(value, out var price);

        if (success)
        {
            this.AppDataService.PlanetaryResourcesPrices[resource] = price;
            this.OnChange.InvokeAsync(true);
        }
    }

    private void ClearPrices()
    {
        this.AppDataService.PlanetaryResourcesPrices = new Dictionary<string, decimal>();
    }
}
