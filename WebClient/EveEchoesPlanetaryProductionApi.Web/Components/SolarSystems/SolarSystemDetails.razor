@using EveEchoesPlanetaryProductionApi.Services.Data.Models.SolarSystems.GetSolarSystemById
@using EveEchoesPlanetaryProductionApi.Web.Services

@inject IAppDataService AppDataService;

<div class="card text-center mx-auto" style="width: 100%">
    <div class="card-header">
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <NavLink class="nav-link active" href=@($"details/") ActiveClass="active" Match="NavLinkMatch.All">Details</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class=@($"nav-link {this.NavLinkClass()}") href="@($"best/")" ActiveClass="active" Match="NavLinkMatch.All">Best In System</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link " href="@($"best/constellation")" ActiveClass="active" Match="NavLinkMatch.All">Best In Constellation</NavLink>
            </li>
        </ul>
    </div>
    <div class="card-body">
        <h3 class="card-title">System: @this.SolarSystem.Name</h3>
        <h4 class="card-text">Constellation: @this.SolarSystem.ConstellationName</h4>
        <h5 class="card-text">Region: @this.SolarSystem.RegionName</h5>

        @if (this.PriceUpdateDate != default)
        {
            <h6>Latest price update: @this.PriceUpdateDate.ToString("dd MMMM yyyy")</h6>
        }

        <div class="just-padding text-left">
            <div class="list-group list-group-root">
                <div class="list-group-item">
                    @foreach (var planet in this.SolarSystem.Planets)
                    {
                        <AllPlanetResourcesTable Planet="planet"></AllPlanetResourcesTable>
                    }
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public SolarSystemServiceModel SolarSystem { get; set; }

    private DateTime PriceUpdateDate => this.SolarSystem.Planets
        .SelectMany(p => p.PlanetResources)
        .Select(pr => pr.Price)
        .Select(p => p.Time)
        .OrderByDescending(p => p.Date)
        .FirstOrDefault();

    protected override async Task OnInitializedAsync()
    {
        this.AppDataService.CurrentSolarSystem = this.SolarSystem;

        await base.OnInitializedAsync();
    }

    private string NavLinkClass()
    {
        if (this.SolarSystem is null || this.SolarSystem.Planets.Count() is 0)
        {
            return "disabled";
        }

        return string.Empty;
    }
}
