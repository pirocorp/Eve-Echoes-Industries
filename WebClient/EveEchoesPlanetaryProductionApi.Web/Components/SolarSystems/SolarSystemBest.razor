@using EveEchoesPlanetaryProductionApi.Services.Data.Models.SolarSystems.GetSolarSystemById
@using EveEchoesPlanetaryProductionApi.Services.Models.EveEchoesMarket
@using EveEchoesPlanetaryProductionApi.Web.Services
@using EveEchoesPlanetaryProductionApi.Web.Components

@inject IAppDataService AppDataService;

<div class="card text-center mx-auto" style="width: 100%">
    <div class="card-header">
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <NavLink class="nav-link" href=@($"details/") ActiveClass="active" Match="NavLinkMatch.All">Details</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link " href="@($"best/")" ActiveClass="active" Match="NavLinkMatch.All">Best In System</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link " href="@($"best/constellation")" ActiveClass="active" Match="NavLinkMatch.All">Best In Constellation</NavLink>
            </li>
        </ul>
    </div>

    <div class="card-body">
        <h3 class="card-title">System: @this.SolarSystem.Name</h3>

        <div class="row">
            <div class="col-md-5 offset-md-1">
                <PriceSelectorComponent OnChange="this.PriceSelectorChangeHandler"></PriceSelectorComponent>
            </div>
            @if (this.PriceUpdateDate != default)
            {
                <p class="col-md-5 align-self-center">Latest price update: @this.PriceUpdateDate.ToString("dd MMMM yyyy")</p>
            }
        </div>

        @if (this.PriceSelector is PriceSelector.UserProvided)
        {
            <InputPrices SolarSystem="this.SolarSystem" OnChange="this.OnResourceValuesChange"></InputPrices>
        }

        @if (this.BestPlanets is not null)
        {
            <BestPlanetaryResourcesTable BestPlanets="this.BestPlanets"></BestPlanetaryResourcesTable>
        }
    </div>
</div>


@code {
    [Parameter]
    public SolarSystemServiceModel SolarSystem { get; set; }

    private IEnumerable<PlanetValue> BestPlanets { get; set; }

    private PriceSelector PriceSelector { get; set; }

    private DateTime PriceUpdateDate => this.SolarSystem.Planets
        .SelectMany(p => p.PlanetResources)
        .Select(pr => pr.Price)
        .Select(p => p.Time)
        .OrderByDescending(p => p.Date)
        .FirstOrDefault();

    private Func<SolarSystemServicePlanetPlanetResourceModel, decimal> GetPriceSelector(PriceSelector priceSelector)
        => priceSelector switch
        {
            PriceSelector.Sell => p => p.Price.Sell,
            PriceSelector.Buy => p => p.Price.Buy,
            PriceSelector.LowestSell => p => p.Price.LowestSell,
            PriceSelector.HighestBuy => p => p.Price.HighestBuy,
            PriceSelector.UserProvided => p => this.AppDataService.PlanetaryResourcesPrices.TryGetValue(p.ItemName, out var value) ? value : 0,
            _ => p => 0
        };

    private void CalculateBestPlanets()
    {
        var func = this.GetPriceSelector(this.PriceSelector);

        this.BestPlanets = this.SolarSystem.Planets
            .Select(p =>
            {
                var bestPlanetResource = p
                    .PlanetResources
                    .OrderByDescending(p => func(p) * (decimal)p.Output)
                    .First();

                return new PlanetValue()
                {
                    Name = p.Name,
                    Resource = bestPlanetResource.ItemName,
                    Output = bestPlanetResource.Output,
                    Price = func(bestPlanetResource)
                };
            })
            .OrderByDescending(p => p.Price * (decimal)p.Output)
            .ToList();
    }

    private void PriceSelectorChangeHandler(PriceSelector priceSelector)
    {
        this.PriceSelector = priceSelector;

        this.CalculateBestPlanets();
    }

    private void OnResourceValuesChange(bool change)
    {
        if (change)
        {
            this.CalculateBestPlanets();
        }
    }

    public class PlanetValue
    {
        public string Name { get; set; }

        public string Resource { get; set; }

        public double Output { get; set; }

        public decimal Price { get; set; }
    }
}
